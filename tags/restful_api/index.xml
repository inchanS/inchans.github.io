<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>RESTful_API - Tag - inchan.dev</title>
        <link>https://www.inchan.dev/tags/restful_api/</link>
        <description>RESTful_API - Tag - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Wed, 08 Mar 2023 05:14:43 &#43;0900</lastBuildDate><atom:link href="https://www.inchan.dev/tags/restful_api/" rel="self" type="application/rss+xml" /><item>
    <title>Swagger를 이용한 백엔드의 효과적인 명세 전달</title>
    <link>https://www.inchan.dev/posts/202303080503/</link>
    <pubDate>Wed, 08 Mar 2023 05:14:43 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202303080503/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1516321497487-e288fb19713f?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2670&amp;q=80" referrerpolicy="no-referrer">
            </div>사진출처: unsplash
백엔드가 효과적인 명세 전달 고민 Failure 그동안 진행했던 프로젝트에서 제대로 된 API 명세를 적시에 프론트측에 전달하지 못했고,
때문에 최종 출시를 앞두고 서로간의 코드 오류를 잡느라 시간적 비용이 꽤나 낭비됐다. 간단하게는 Request Body 값의 TYPE과 관련된 소통 혼선으로 겪었던 헤프닝도 더러 있었다. 어떻게 하면 좋을까? 우선은 백엔드의 입장에서 생각해본다.
명세는 코드가 만들어지면서 늘 수정될 수 있다. 때문에 명세는 코드와 함께 작업되어야 하고, API 테스트를 위해 즉각적으로 수정되어야 한다. 같은 백엔드 팀의 경우에는 직접 코드를 보기에 명세의 부족함을 보완할 수는 있다.]]></description>
</item>
<item>
    <title>status code 204</title>
    <link>https://www.inchan.dev/posts/202212250509/</link>
    <pubDate>Sun, 25 Dec 2022 05:09:42 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202212250509/</guid>
    <description><![CDATA[tag : #restAPI
#restAPI
덧글 삭제 API 관련 코드 리팩토링 중, status code를 맞추다가 알게 된 사실!
statusCode 204는 response를 전송하지 않는다!! 다만 status code &ldquo;204&rdquo; 만 전달할 뿐.
이걸 몰라서 코드의 오류인줄 알고 한참을 헤맸다. status code를 200으로 바꿨더니 다시 원래대로 response가 전송되었다.
status code 문서의 개요만 어설프게 보고서는, 삭제니까 no content인 204가 맞겠지 하고 내 멋대로 이해한 실수였다. 204에서 다시 200으로 처리한 이유는, 삭제된 이후의 덧글 리스트와 페이지네이션 위치를 json으로 전달해야할 필요성이 있어서였다.]]></description>
</item>
</channel>
</rss>
