<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Jest - Tag - inchan.dev</title>
        <link>https://inchan.dev/tags/jest/</link>
        <description>Jest - Tag - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Thu, 29 Jun 2023 12:58:27 &#43;0900</lastBuildDate><atom:link href="https://inchan.dev/tags/jest/" rel="self" type="application/rss+xml" /><item>
    <title>error log - jest.spyOn()에서 재사용함수에 대한 모의 불가</title>
    <link>https://inchan.dev/posts/202306291258/</link>
    <pubDate>Thu, 29 Jun 2023 12:58:27 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306291258/</guid>
    <description><![CDATA[사용환경 : Node.Js, Express
언어 : typeScript
테스트 프레임워크 : Jest
상황 Abstract 같은 파일 (모듈) 내에 있는 함수의 재사용시,
테스트 코드를 작성하는데 모의하기가 상당히 까다롭고 불편함.
특히 테스트 코드가 지나치게 지저분해짐 user.service.ts 파일 내부 다음은 user.service.ts 파일의 내부 코드 요약이다.
초점을 맞춰 볼 곳은,
updateUserInfo 함수 내부에서 checkDuplicateEmail 함수와 checkDuplicateNickname 함수가 재사용되고 있다.
// ... const checkDuplicateEmail = async ( email: string ) =&gt; { ... } const checkDuplicateNickname = async ( nickname: string ) =&gt; { .]]></description>
</item>
<item>
    <title>Jest에서 jest.clearAllMocks()와 jest.resetAllMocks() 차이점</title>
    <link>https://inchan.dev/posts/202303311059/</link>
    <pubDate>Fri, 31 Mar 2023 10:43:08 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202303311059/</guid>
    <description><![CDATA[Introduction Jest는 페이스북에서 개발한 JavaScript 테스트 프레임워크로, 간편한 사용법과 빠른 실행 속도로 인기가 있다.
Jest를 이용하여 테스트 코드를 작성하던 중, 수 많은 함수나 루트를 mocking하게 되는데 지저분해진 테스트 코드를 리팩토링 하다가 mock함수의 초기화에 대한 고찰을 하게 되었다.
Jest의 모의 함수(mock functions)를 사용할 때 중요한 두 가지 함수인 jest.clearAllMocks()와 jest.resetAllMocks()의 차이에 대해 기술한다.
jest.clearAllMocks() jest.clearAllMocks() 함수는 모든 모의 함수의 호출 정보를 초기화하는 데 사용한다.
이를 통해 테스트 간 독립성을 보장하며, 다양한 테스트 시나리오에서 중요한 역할을 한다.]]></description>
</item>
</channel>
</rss>
