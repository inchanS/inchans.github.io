<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>project_review - Tag - inchan.dev</title>
        <link>https://inchan.dev/tags/project_review/</link>
        <description>project_review - Tag - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Fri, 26 Jan 2024 11:49:52 &#43;0900</lastBuildDate><atom:link href="https://inchan.dev/tags/project_review/" rel="self" type="application/rss+xml" /><item>
    <title>Node.js에서 OOP 기반 리포지토리에 적용한 싱글톤 디자인패턴</title>
    <link>https://inchan.dev/posts/202401261149/</link>
    <pubDate>Fri, 26 Jan 2024 11:49:52 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401261149/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1642624466789-9e0649ba4e31?q=80&amp;w=2832&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" referrerpolicy="no-referrer">
            </div>&lt;표지 사진출처: Unsplash)&gt; Project Tech Stack Overview Language: TypeScript
Platform: Node.js
Web Framework: Express.js
Database: MySQL
ORM: TypeORM
Cloud Storage: AWS S3
Development Tool: WebStorm
Version Control and Issue Tracking: GitHub Issue
얼마 전, 모든 코드를 OOP로 리팩토링한 뒤, 한 문제를 발견했다.
리포지토리 역시 클래스 기반으로 내보내고 있었는데 때문에 각각의 서비스 로직에서는 이를 new Class() 형태로 불러오면서 단일 인스턴스가 아닌 여러 인스턴스의 생성 위험이 있었다.
OOP 리팩토링 전, 함수기반에서는 최초 호출된 datasource 인스턴스 하나를 계속해서 사용하기에 문제가 없었는데 이 부분을 간과했다.]]></description>
</item>
<item>
    <title>Node.js와 TypeORM에서 겪은 트랜잭션 롤백 문제 - 원인 분석과 해결 방법</title>
    <link>https://inchan.dev/posts/202401241017/</link>
    <pubDate>Wed, 24 Jan 2024 10:19:14 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401241017/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1488229297570-58520851e868?q=80&amp;w=2938&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" referrerpolicy="no-referrer">
            </div>&lt;표지 사진출처: Unsplash&gt;
Project Tech Stack Overview Language: TypeScript
Platform: Node.js
Web Framework: Express.js
Database: MySQL
ORM: TypeORM
Cloud Storage: AWS S3
Server: AWS EC2
Development Tool: WebStorm
Collaboration Tool: Slack
Version Control and Issue Tracking: GitHub Issue
문제 상황 프로젝트에서 발견된 주요 문제는 TypeORM을 사용하는 Node.js 환경에서 트랜잭션 관리와 롤백이 제대로 이루어지지 않는 것이었다. 이는 게시글을 등록하는 로직에서 발견되었으며, 예기치 않은 오류가 발생했을 경우 데이터베이스에 불필요한 데이터가 잔존하는 결과를 초래했다.]]></description>
</item>
<item>
    <title>error log - jest.spyOn()에서 재사용함수에 대한 모의 불가</title>
    <link>https://inchan.dev/posts/202306291258/</link>
    <pubDate>Thu, 29 Jun 2023 12:58:27 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306291258/</guid>
    <description><![CDATA[사용환경 : Node.Js, Express
언어 : typeScript
테스트 프레임워크 : Jest
상황 Abstract 같은 파일 (모듈) 내에 있는 함수의 재사용시,
테스트 코드를 작성하는데 모의하기가 상당히 까다롭고 불편함.
특히 테스트 코드가 지나치게 지저분해짐 user.service.ts 파일 내부 다음은 user.service.ts 파일의 내부 코드 요약이다.
초점을 맞춰 볼 곳은,
updateUserInfo 함수 내부에서 checkDuplicateEmail 함수와 checkDuplicateNickname 함수가 재사용되고 있다.
// ... const checkDuplicateEmail = async ( email: string ) =&gt; { ... } const checkDuplicateNickname = async ( nickname: string ) =&gt; { .]]></description>
</item>
<item>
    <title>AWS EC2에서 product 서버와 개발용 서버 같이 사용하기</title>
    <link>https://inchan.dev/posts/202306191659/</link>
    <pubDate>Mon, 19 Jun 2023 16:59:51 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306191659/</guid>
    <description><![CDATA[프로젝트를 진행하다보면 필연적으로 프론트엔드와의 통신교류가 필요하고,
이 때마다 local server로 열기보단 상시 열려있는 server가 있는 것이 훨씬 편하다.
때문에 이러한 개발과정상 필요한 back-end의 통신교류용 API 서버를 AWS EC2에서 간편하게 열어 사용하는 방법에 대해 기술하려 한다.
초기 처음 통신교류를 위한 서버는 VScode의 Live Share Extension을 이용하였다.
방법은 다음과 같다.
extensions에서 Live Share 설치 좌측 사이드 메뉴에서 Live Share 아이콘 클릭 Share 버튼을 클릭하면 실시간 공유가 시작된다. 여기서 Shared Servers를 클릭하고 상단 검색창에 포트 번호를 입력후, enter를 누르면 해당 포트로 서버가 공유된다.]]></description>
</item>
<item>
    <title>AWS RDS 데이터 - 다른 계정으로 이전하기</title>
    <link>https://inchan.dev/posts/202306191507/</link>
    <pubDate>Mon, 19 Jun 2023 15:07:40 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306191507/</guid>
    <description><![CDATA[서로 다른 AWS의 계정간 RDS의 데이터를 이전하는 방법에 대해 소개한다.
AWS RDS 계정간 이동 우선 간략히 설명하자면 순서는 다음과 같다.
Info 구 계정에서 스냅샷 생성 생성이 완전히 완료되면 스냅샷 공유 탭이 활성화된다. 스냅샷 공유에서 private 선택후, 계정란에 이전할 새로운 계정의 ID 입력 이전할 새 계정으로 로그인 후, RDS에서 좌측 사이드바의 스냅샷 메뉴 - 상단 나와 공유된 스냅샷 탭 클릭 마이그레이션 선택! (RDS 세팅시 프리티어라고 따로 설정하는 안내가 없으니 잘 보고 세팅) 끝!]]></description>
</item>
<item>
    <title>Git commit message 컨벤션 설정</title>
    <link>https://inchan.dev/posts/202306171531/</link>
    <pubDate>Sat, 17 Jun 2023 15:31:26 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306171531/</guid>
    <description><![CDATA[문제 발견 git commit message 작성시 보통 첫줄에 위치한 제목줄에 들어가는 가이드로서,
이전에 내가 사용하던 규칙은 다음과 같았다.
Add - 레이아웃 / 기능 추가 Remove - 내용 삭제 (폴더 / 파일 삭제) Modify - 수정 (JSON 데이터 포맷 변경 / 버튼 색깔 변경 / 폰트 변경) Fix - 버그/오류 해결 Refactor - 코드 리팩토링 (멘토 리뷰 반영 / 스스로 리팩토링 / 중복 코드 제거 / 불필요 코드 제거 / 성능 개선)]]></description>
</item>
<item>
    <title>MySQL에서 이메일 재사용 가능하게 하기- Soft Delete와 Unique를 함께 활용하다.</title>
    <link>https://inchan.dev/posts/202306070208/</link>
    <pubDate>Wed, 07 Jun 2023 02:08:24 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306070208/</guid>
    <description><![CDATA[개발환경 Javascript 런타임 플랫폼: Node.js 언어: TypeScript 프레임워크: Express DB: MySQL ORM: TypeORM 현재 조건 상황 회원가입시, 이메일과 패스워드가 필수 입력입력인데, 이메일의 경우 mySQL에서 unique 처리 회원가입 과정에서 이메일 중복 여부를 확인하고 통과했을 경우에만 회원가입 가능 회원 삭제시, 실제 회원정보를 DB에서 지우지 않고 TypeORM의softDelete 방식으로 deleted_at 컬럼에 삭제일시가 기록되는 방식 (일정기간 이후 삭제할 요량으로 단기간 데이터 보존) Question 이미 회원 삭제된 정보의 이메일로 재가입하려는 경우,
해당 이메일은 이미 mySQL에서 unique로 입력되어있는 이메일이기 때문에 이메일 중복확인에서 통과되지 않는다.]]></description>
</item>
<item>
    <title>error log - TypeORM migration 할 때 cross ENV 설정 문제</title>
    <link>https://inchan.dev/posts/202304010529/</link>
    <pubDate>Sat, 01 Apr 2023 05:30:56 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202304010529/</guid>
    <description><![CDATA[TypeORM migration TypeORM migration:create typeorm migration을 시도해보면서 준비한건 몇가지 되지 않았다. 우선, 터미널에서 typeorm migration 파일을 생성하는 명령어. $ npx typeorm migration:create &lt;path/file_name&gt; 예를 들면 npx typeorm migration:create ./src/migrations/default-tables
이런 식으로 사용할 수 있다.
그리고 마이그레이션 실행시 마이그레이션 파일들의 위치를 알려줄 수 있도록 datasource config 부분에 다음과 같이 설정을 추가한다.
import { DataSource } from &#39;typeorm&#39;; const dataSource = new DataSource({ type: process.env.TYPEORM_CONNECTION, host: process.env.TYPEORM_HOST, port: process.env.TYPEORM_PORT, username: process.env.TYPEORM_USERNAME, password: process.]]></description>
</item>
<item>
    <title>error log - EC2에서 PM2 실행시 NODE_ENV 설정 명령어</title>
    <link>https://inchan.dev/posts/202303162353/</link>
    <pubDate>Thu, 16 Mar 2023 23:56:16 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202303162353/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1599153066743-08810dc8a419?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8YXdzfGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60&amp;h=300" referrerpolicy="no-referrer">
            </div>1
AWS EC2에 배포를 하려하는데, 조그만 문제가 하나 생겼다.
아래 예시와 같이 .env파일을 개발, 배포 등의 목적으로 각각 나누어 코드를 작성했는데,
main.ts 파일 코드 예시 if (process.env.NODE_ENV === &#39;production&#39;) { dotenv.config({ path: path.join(__dirname, &#39;/../env/.env.production&#39;) }); } else if (process.env.NODE_ENV === &#39;develop&#39;) { dotenv.config({ path: path.join(__dirname, &#39;/../env/.env.dev&#39;) }); console.log(&#39;process.env.NODE_ENV is &#39;, process.env.NODE_ENV); } else if (process.env.NODE_ENV === &#39;test&#39;) { dotenv.config({ path: path.join(__dirname, &#39;/../env/.env.test&#39;) }); } else { throw new Error(&#39;process.env.NODE_ENV IS_NOT_SET!!&#39;); } 이걸 EC2에서 pm2로 프로세스를 돌릴 때 어떻게 명령을 내려야 하는가 였다.]]></description>
</item>
<item>
    <title>Swagger를 이용한 백엔드의 효과적인 API명세 전달</title>
    <link>https://inchan.dev/posts/202303080503/</link>
    <pubDate>Wed, 08 Mar 2023 05:14:43 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202303080503/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1516321497487-e288fb19713f?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2670&amp;q=80" referrerpolicy="no-referrer">
            </div>사진출처: unsplash
백엔드가 효과적인 명세 전달 고민 Failure 그동안 진행했던 프로젝트에서 제대로 된 API 명세를 적시에 프론트측에 전달하지 못했고,
때문에 최종 출시를 앞두고 서로간의 코드 오류를 잡느라 시간적 비용이 꽤나 낭비됐다. 간단하게는 Request Body 값의 TYPE과 관련된 소통 혼선으로 겪었던 헤프닝도 더러 있었다. 어떻게 하면 좋을까? 우선은 백엔드의 입장에서 생각해본다.
명세는 코드가 만들어지면서 늘 수정될 수 있다. 때문에 명세는 코드와 함께 작업되어야 하고, API 테스트를 위해 즉각적으로 수정되어야 한다. 같은 백엔드 팀의 경우에는 직접 코드를 보기에 명세의 부족함을 보완할 수는 있다.]]></description>
</item>
</channel>
</rss>
