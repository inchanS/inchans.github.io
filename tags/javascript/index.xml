<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - Tag - inchan.dev</title>
        <link>https://inchan.dev/tags/javascript/</link>
        <description>JavaScript - Tag - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Thu, 16 Mar 2023 23:56:16 &#43;0900</lastBuildDate><atom:link href="https://inchan.dev/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>error log - EC2에서 PM2 실행시 NODE_ENV 설정 명령어</title>
    <link>https://inchan.dev/posts/202303162353/</link>
    <pubDate>Thu, 16 Mar 2023 23:56:16 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202303162353/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1599153066743-08810dc8a419?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8YXdzfGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60&amp;h=300" referrerpolicy="no-referrer">
            </div>1
AWS EC2에 배포를 하려하는데, 조그만 문제가 하나 생겼다.
아래 예시와 같이 .env파일을 개발, 배포 등의 목적으로 각각 나누어 코드를 작성했는데,
main.ts 파일 코드 예시 if (process.env.NODE_ENV === &#39;production&#39;) { dotenv.config({ path: path.join(__dirname, &#39;/../env/.env.production&#39;) }); } else if (process.env.NODE_ENV === &#39;develop&#39;) { dotenv.config({ path: path.join(__dirname, &#39;/../env/.env.dev&#39;) }); console.log(&#39;process.env.NODE_ENV is &#39;, process.env.NODE_ENV); } else if (process.env.NODE_ENV === &#39;test&#39;) { dotenv.config({ path: path.join(__dirname, &#39;/../env/.env.test&#39;) }); } else { throw new Error(&#39;process.env.NODE_ENV IS_NOT_SET!!&#39;); } 이걸 EC2에서 pm2로 프로세스를 돌릴 때 어떻게 명령을 내려야 하는가 였다.]]></description>
</item>
<item>
    <title>error log - throw와 return</title>
    <link>https://inchan.dev/posts/202301180430/</link>
    <pubDate>Wed, 18 Jan 2023 04:30:23 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202301180430/</guid>
    <description><![CDATA[문제상황 Failure 에러핸들링 중, 에러메세지를 response로 보내려고 한다. 이에 return을 사용 에러가 나와야 할 상황에서 정상적으로 에러메세지를 response로 보낸다. 하지만 에러코드를 알려야 할 status code는 정상을 알리며 이후 모든 함수와 명령이 진행됨 해결 Success return이 아닌 throw를 사용하여야 한다. 특히 node.js에서 서버를 돌릴때,
단순히 return만으로는 이후의 모든 과정, 즉 controller - service - dao 등에서 return을 한 함수 이외 모든 명령어가 진행 된다.
하지만 throw의 경우, 에러를 내보내는 것 뿐만 아니라 이후의 모든 명령어를 중지시킨다.]]></description>
</item>
<item>
    <title>인스타그램 로그인 화면 구성</title>
    <link>https://inchan.dev/posts/202210040515/</link>
    <pubDate>Tue, 04 Oct 2022 05:15:23 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202210040515/</guid>
    <description><![CDATA[justgram - UI 만들기 Mission 1 - 로그인 페이지 레이아웃 처음 HTML 파일을 작성할때, display : flex; 를 쓰지 않았다. 결과는 원하는대로 나왔지만 나의 첫 코드는 쓸데없이 수많은 &lt;div&gt;와 &lt;p&gt;태그로 범벅이 됐다. HTML 초기버전 &lt;div class=&#34;wrapLoginBox&#34;&gt; &lt;div class=&#34;loginBox&#34;&gt; &lt;p id=&#34;title&#34;&gt;justgram&lt;/p&gt; &lt;div class=&#34;inputBox&#34;&gt; &lt;p&gt; &lt;input id=&#34;userInput&#34; type=&#34;text&#34; placeholder=&#34;전화번호, 사용자 이름 또는 이메일&#34;/&gt; &lt;/p&gt; &lt;p&gt; &lt;input id=&#34;pwInput&#34; type=&#34;password&#34; placeholder=&#34;비밀번호&#34; /&gt; &lt;/p&gt; &lt;p&gt;&lt;button class=&#34;loginBtn&#34; disabled&gt;로그인&lt;/button&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&#34;foot&#34;&gt; &lt;a href=&#34;https://www.instagram.com/accounts/password/reset/&#34;&gt;비밀번호를 잊으셨나요?&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 위 코드가 처음 아무 생각없이 짠 HTML이다.]]></description>
</item>
<item>
    <title>JavaScript - basic 변수</title>
    <link>https://inchan.dev/posts/202209120523/</link>
    <pubDate>Mon, 12 Sep 2022 05:23:04 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202209120523/</guid>
    <description><![CDATA[JavaScript - Basic 변수 변수는 2단계로 이루어진다.
변수의 선언 변수에 대한 값을 할당 let myNumber // myNumber라는 변수를 &#34;선언&#34; myNumber = 100 // 앞에서 선언한 변수에 값을 &#34;할당&#34; 용어 정리 - 변수 : 데이터를 담을 수 있는 대상 - 변수의 선언과 변수에 대한 값을 할당하는 것은 별개이다. 일반적으로 변수의 선언과 할당이 동시에 이루어진다. (아래 코드 참조)
let myNumber = 100 변수를 선언하는 명령어 var, let, const 각각의 차이는?? 종류 선언 재선언 재할당 var O O O let O X O const O X X 위 표와 같이 즉, let이나 const는 이미 선언했던 변수를 다시 선언할 수 없다.]]></description>
</item>
</channel>
</rss>
