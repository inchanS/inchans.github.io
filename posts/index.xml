<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - inchan.dev</title>
        <link>https://inchan.dev/posts/</link>
        <description>All Posts | inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Fri, 26 Jan 2024 11:49:52 &#43;0900</lastBuildDate><atom:link href="https://inchan.dev/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Node.js에서 OOP 기반 리포지토리에 적용한 싱글톤 패턴</title>
    <link>https://inchan.dev/posts/202401261149/</link>
    <pubDate>Fri, 26 Jan 2024 11:49:52 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401261149/</guid>
    <description><![CDATA[Project Tech Stack Overview Language: TypeScript
Platform: Node.js
Web Framework: Express.js
Database: MySQL
ORM: TypeORM
Cloud Storage: AWS S3
Development Tool: WebStorm
Version Control and Issue Tracking: GitHub Issue
얼마 전, 모든 코드를 OOP로 리팩토링한 뒤, 한 문제를 발견했다.
리포지토리 역시 클래스 기반으로 내보내고 있었는데 때문에 각각의 서비스 로직에서는 이를 new Class() 형태로 불러오면서 단일 인스턴스가 아닌 여러 인스턴스의 생성 위험이 있었다.
OOP 리팩토링 전, 함수기반에서는 최초 호출된 datasource 인스턴스 하나를 계속해서 사용하기에 문제가 없었는데 이 부분을 간과했다.]]></description>
</item>
<item>
    <title>Node.js와 TypeORM에서 겪은 트랜잭션 롤백 문제 - 원인 분석과 해결 방법</title>
    <link>https://inchan.dev/posts/202401241017/</link>
    <pubDate>Wed, 24 Jan 2024 10:19:14 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401241017/</guid>
    <description><![CDATA[Project Tech Stack Overview Language: TypeScript
Platform: Node.js
Web Framework: Express.js
Database: MySQL
ORM: TypeORM
Cloud Storage: AWS S3
Server: AWS EC2
Development Tool: WebStorm
Collaboration Tool: Slack
Version Control and Issue Tracking: GitHub Issue
문제 상황 프로젝트에서 발견된 주요 문제는 TypeORM을 사용하는 Node.js 환경에서 트랜잭션 관리와 롤백이 제대로 이루어지지 않는 것이었다. 이는 게시글을 등록하는 로직에서 발견되었으며, 예기치 않은 오류가 발생했을 경우 데이터베이스에 불필요한 데이터가 잔존하는 결과를 초래했다.
좀 더 자세히 풀어보자면, 현재 게시글을 등록하는 로직은 다음과 같다.]]></description>
</item>
<item>
    <title>Github Pages에 Cloudflare 도메인 연결 중 리다이렉션 실패가 난다면</title>
    <link>https://inchan.dev/posts/202401122324/</link>
    <pubDate>Fri, 12 Jan 2024 23:24:58 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401122324/</guid>
    <description><![CDATA[문제상황 구글이 도메인 사업을 매각한 후, 도메인 이전을 차일피일 미루다 최근에서야 Cloudflare로 도메인을 이전하였다.1
모든 DNS 역시 정상적으로 이전하였고, 메일서비스를 비롯한 다른 서비스들도 정상작동함을 확인하였다.
그런데 갑자기 해당 도메인의 주소가 정상적으로 작동하지 않는 문제가 생겼다.
브라우저에서 20회 이상의 리다이렉션으로 페이지 불러오기 실패
해결방법 Cloudflare side menu - SSL/TLS - 개요 : SSL/TLS 암호화 모드를
가변에서 전체로 변경했더니 문제 해결!
그런데 왜?? 현재 다른 설정은 항상 HTTPS 사용이 체크되어있는데 이 설정과 충돌해서일까?]]></description>
</item>
<item>
    <title>AWS EC2 서버에 HTTPS 적용하기</title>
    <link>https://inchan.dev/posts/202401122216/</link>
    <pubDate>Wed, 10 Jan 2024 22:17:59 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401122216/</guid>
    <description><![CDATA[팀 프로젝트로 백엔드 서버를 EC2에서 배포하여 사용중인데 여기에 HTTPS를 적용하여 보았다.
겁먹지 말기 AWS내에서 각 서비스를 이리저리 다니며
무언가를 자꾸 생성하고 또 세팅하다보니 자칫 어렵다고 지레 겁먹기 쉬운데
실제로 해보면 생각보다 간단하고 쉽다. 구글링을 하다보면 여러 관련 글이 있는데 아래 참고한 2개의 웹페이지가 가장 잘 설명되어있다.
EC2 HTTPS로 연결하기 EC2에 HTTPS 적용하기 미리 말해두기 해당 참고 사이트의 글을 보다보면 친절하게 잘 설명되어있음에도 살짝씩 어리둥절할 때가 있다.
왜냐면 AWS 웹 UI가 생각보다 자주 바뀌는듯 해서 설명에 참고된 스크린샷과 현재 시점의 AWS 화면이 다르기 때문이다.]]></description>
</item>
<item>
    <title>error log - jest.spyOn()에서 재사용함수에 대한 모의 불가</title>
    <link>https://inchan.dev/posts/202306291258/</link>
    <pubDate>Thu, 29 Jun 2023 12:58:27 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306291258/</guid>
    <description><![CDATA[사용환경 : Node.Js, Express
언어 : typeScript
테스트 프레임워크 : Jest
상황 Abstract 같은 파일 (모듈) 내에 있는 함수의 재사용시,
테스트 코드를 작성하는데 모의하기가 상당히 까다롭고 불편함.
특히 테스트 코드가 지나치게 지저분해짐 user.service.ts 파일 내부 다음은 user.service.ts 파일의 내부 코드 요약이다.
초점을 맞춰 볼 곳은,
updateUserInfo 함수 내부에서 checkDuplicateEmail 함수와 checkDuplicateNickname 함수가 재사용되고 있다.
// ... const checkDuplicateEmail = async ( email: string ) =&gt; { ... } const checkDuplicateNickname = async ( nickname: string ) =&gt; { .]]></description>
</item>
<item>
    <title>Webina 참여 회고 - 원티드 주최 &#39;ChatGPT 시대에 구성원의 역량을 어떻게 육성할 것인가?&#39;</title>
    <link>https://inchan.dev/posts/202306211131/</link>
    <pubDate>Wed, 21 Jun 2023 11:31:43 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306211131/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1679083216051-aa510a1a2c0e?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=2664&amp;q=80" referrerpolicy="no-referrer">
            </div>&lt;표지 사진출처: Unsplash&gt; 지난 월요일 저녁 &ldquo;ChatGPT 시대에 구성원의 역량을 어떻게 육성할 것인가?&rdquo; 라는 아주 흥미로운 주제의 웨비나가 있어 참여하였다. 비단 HR 관계자가 아니더라도 각 팀의 리더 또는 구성원이라면, 또는 조직에 속해있다면, 그리고 발빠르게 변화하는 현시대적 흐름에서 자기 스스로를 육성하는 방면에서도 몹시 듣고 싶은 주제였다.
현재 Chat GPT를 필두로 한 AI가 대다수의 업계에 미치는 파급효과는 어마어마하다.
OpenAI로 인한 영향, 방법 등에 관한 콘텐츠가 마구잡이로 쏟아져나오고 있는 현재이다.
이러한 시대적 상황에서 OpenAI가 조금이라도 나의 업무에 미치는 영향이 있다면 이번 웨비나는 쉽게 지나치기 힘든 주제였다.]]></description>
</item>
<item>
    <title>AWS EC2에서 product 서버와 개발용 서버 같이 사용하기</title>
    <link>https://inchan.dev/posts/202306191659/</link>
    <pubDate>Mon, 19 Jun 2023 16:59:51 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306191659/</guid>
    <description><![CDATA[프로젝트를 진행하다보면 필연적으로 프론트엔드와의 통신교류가 필요하고,
이 때마다 local server로 열기보단 상시 열려있는 server가 있는 것이 훨씬 편하다.
때문에 이러한 개발과정상 필요한 back-end의 통신교류용 API 서버를 AWS EC2에서 간편하게 열어 사용하는 방법에 대해 기술하려 한다.
초기 처음 통신교류를 위한 서버는 VScode의 Live Share Extension을 이용하였다.
방법은 다음과 같다.
extensions에서 Live Share 설치 좌측 사이드 메뉴에서 Live Share 아이콘 클릭 Share 버튼을 클릭하면 실시간 공유가 시작된다. 여기서 Shared Servers를 클릭하고 상단 검색창에 포트 번호를 입력후, enter를 누르면 해당 포트로 서버가 공유된다.]]></description>
</item>
<item>
    <title>AWS RDS 데이터 - 다른 계정으로 이전하기</title>
    <link>https://inchan.dev/posts/202306191507/</link>
    <pubDate>Mon, 19 Jun 2023 15:07:40 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306191507/</guid>
    <description><![CDATA[서로 다른 AWS의 계정간 RDS의 데이터를 이전하는 방법에 대해 소개한다.
AWS RDS 계정간 이동 우선 간략히 설명하자면 순서는 다음과 같다.
Info 구 계정에서 스냅샷 생성 생성이 완전히 완료되면 스냅샷 공유 탭이 활성화된다. 스냅샷 공유에서 private 선택후, 계정란에 이전할 새로운 계정의 ID 입력 이전할 새 계정으로 로그인 후, RDS에서 좌측 사이드바의 스냅샷 메뉴 - 상단 나와 공유된 스냅샷 탭 클릭 마이그레이션 선택! (RDS 세팅시 프리티어라고 따로 설정하는 안내가 없으니 잘 보고 세팅) 끝!]]></description>
</item>
<item>
    <title>Git commit message 컨벤션 설정</title>
    <link>https://inchan.dev/posts/202306171531/</link>
    <pubDate>Sat, 17 Jun 2023 15:31:26 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306171531/</guid>
    <description><![CDATA[문제 발견 git commit message 작성시 보통 첫줄에 위치한 제목줄에 들어가는 가이드로서,
이전에 내가 사용하던 규칙은 다음과 같았다.
Add - 레이아웃 / 기능 추가 Remove - 내용 삭제 (폴더 / 파일 삭제) Modify - 수정 (JSON 데이터 포맷 변경 / 버튼 색깔 변경 / 폰트 변경) Fix - 버그/오류 해결 Refactor - 코드 리팩토링 (멘토 리뷰 반영 / 스스로 리팩토링 / 중복 코드 제거 / 불필요 코드 제거 / 성능 개선)]]></description>
</item>
<item>
    <title>MySQL에서 이메일 재사용 가능하게 하기- Soft Delete와 Unique를 함께 활용하다.</title>
    <link>https://inchan.dev/posts/202306070208/</link>
    <pubDate>Wed, 07 Jun 2023 02:08:24 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306070208/</guid>
    <description><![CDATA[개발환경 Javascript 런타임 플랫폼: Node.js 언어: TypeScript 프레임워크: Express DB: MySQL ORM: TypeORM 현재 조건 상황 회원가입시, 이메일과 패스워드가 필수 입력입력인데, 이메일의 경우 mySQL에서 unique 처리 회원가입 과정에서 이메일 중복 여부를 확인하고 통과했을 경우에만 회원가입 가능 회원 삭제시, 실제 회원정보를 DB에서 지우지 않고 TypeORM의softDelete 방식으로 deleted_at 컬럼에 삭제일시가 기록되는 방식 (일정기간 이후 삭제할 요량으로 단기간 데이터 보존) Question 이미 회원 삭제된 정보의 이메일로 재가입하려는 경우,
해당 이메일은 이미 mySQL에서 unique로 입력되어있는 이메일이기 때문에 이메일 중복확인에서 통과되지 않는다.]]></description>
</item>
</channel>
</rss>
