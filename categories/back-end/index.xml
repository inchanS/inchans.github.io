<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Back-End - Category - inchan.dev</title>
        <link>https://www.inchan.dev/categories/back-end/</link>
        <description>Back-End - Category - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Sat, 25 Feb 2023 04:14:31 &#43;0900</lastBuildDate><atom:link href="https://www.inchan.dev/categories/back-end/" rel="self" type="application/rss+xml" /><item>
    <title>typeORM transaction에서 repository 사용하기</title>
    <link>https://www.inchan.dev/posts/202302250414/</link>
    <pubDate>Sat, 25 Feb 2023 04:14:31 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202302250414/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1555421689-491a97ff2040?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTV8fHRyYW5zYWN0aW9ufGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60&amp;h=300" referrerpolicy="no-referrer">
            </div>&lt;사진: unsplash&gt;
transaction 구성중 Entity가 아닌 Repository 사용시 typeORM에서 transaction을 사용하는 방법은 몇가지가 있지만,
복잡한 service단의 처리에서는 아래의 queryRunner 방식이 더 적합할것 같아서
dataSource.createQueryRunner() 방식을 사용했다.1
// transaction으로 묶어주기 const queryRunner = dataSource.createQueryRunner(); await queryRunner.connect(); await queryRunner.startTransaction(); try { // feed 저장 let newTempFeed: Feed = plainToInstance(FeedDto, feedInfo); const tempFeed = await FeedRepository.createFeed(newTempFeed); //&lt;- 문제!! // ... 추가 코드들 } catch (err) { await queryRunner.rollbackTransaction(); throw new Error(`createTempFeed TRANSACTION error: ${err}`); } finally { await queryRunner.]]></description>
</item>
<item>
    <title>Node.js 백엔드TypeScript &#43; typeORM으로 무한 대댓글 가공하기</title>
    <link>https://www.inchan.dev/posts/202302160417/</link>
    <pubDate>Thu, 16 Feb 2023 04:17:07 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202302160417/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1672308627194-9a2c28daa17a?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8dHlwZXNjcmlwdHxlbnwwfHwwfHw%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60&amp;h=300" referrerpolicy="no-referrer">
            </div>&lt;사진: unsplash&gt;
#project_review
기능 구현 목표 댓글, 대댓글&hellip; 대댓글 등의 무한대댓글 구조 typeORM의 Entity를 연계한 createQueryBuilder 등을 지향하며, 최대한 직접적인 QueryRunner 방식 지양 삭제 및 비공개 댓글 가림 json 출력시 불필요한 요소 제거 (특히 Date 타입에서 !! ) 가장 오랜시간을 지연시켰던 Blocker typeORM createQueryBuilder 메소드로 출력시
2023-02-14T08:55:24.090Z // ^ ^^^^ &lt;- 거추장스럽다. 이런 식으로 나오는 문제가 있는데 꽤나 씨름했다.
우선 Entity의 Date type은 datetime이 아닌 timestamp로 했다.
mySQL에서의 출력은 DB가 설치된 서버의 시간대를 따르기에]]></description>
</item>
<item>
    <title>백엔드 - typescript-express 환경에서 jest 및 node 환경에 따라 dotenv 설정 분리</title>
    <link>https://www.inchan.dev/posts/202301230424/</link>
    <pubDate>Mon, 23 Jan 2023 04:24:50 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202301230424/</guid>
    <description><![CDATA[tag : #typescript #express
문제상황 TDD 방법론을 따라 프로젝트를 진행하려는데 Jest를 이용하여 test 코드를 작성하던 중,
한가지 문제를 마주한다.
test를 위한 DB는 그 조건에 따라 생성되고 삭제되어지는 특성상,
실제 개발환경에서의 DB와 test DB를 분리하기 위해서 local DB는 2가지로 나누어 세팅을 해야한다.
그런데 test를 실행할때마다 typeORM 세팅의 연결값을 매번 변경해줘야하는 문제가 상당히 번거로웠다.
고민하던 와중, cross-env라는 npm package를 알게되었고 이를 이용하여 상황에 따라 dotenv 설정값을 유동적으로 활용할 수 있도록 세팅을 구상해보았다.]]></description>
</item>
<item>
    <title>nestJS 시작하기</title>
    <link>https://www.inchan.dev/posts/202301090435/</link>
    <pubDate>Mon, 09 Jan 2023 04:35:58 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202301090435/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/Pasted%20image%2020230301063722.png" referrerpolicy="no-referrer">
            </div>tag : #nestjs #typescript #JavaScript
source : 따라하면서 배우는 NestJS - YouTube
nestJS - cli 설치 사전 조건 : node lts버전 설치
npm i @nestjs/cli 또는
npm i -g @nestjs/cli 이렇게 package.json 파일에서 정상적으로 설치되었음을 확인할 수 있다.
nestJS - new Project 시작하기 nest new &lt;new project name&gt; // 예시 nest new nestjs-test 위와 같이 입력하면 현재 터미널이 위치한 폴더 내에 새로운 &ldquo;nestjs-test&quot;폴더가 만들어지면서 그 안에 세팅이 된다. 만약 $ mkdir nestjs-test 로 폴더를 만들고 이 위치에서 진행중이라면,]]></description>
</item>
<item>
    <title>AWS 퍼블릭 IP와 탄력적 IP</title>
    <link>https://www.inchan.dev/posts/202212280458/</link>
    <pubDate>Wed, 28 Dec 2022 04:58:02 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202212280458/</guid>
    <description><![CDATA[tag : #aws
related link
[AWS] 📚 EIP(탄력적 IP) 개념 &amp; 사용 세팅 정리 AWS EC2에서 백엔드 서버와 프론트엔드 서버를 돌리는 와중, 백엔드 서버의 PM2 리스트 전체가 다운이 되면서 멈추는 일이 발생했다.
이래저래 복구를 하다가, 프리티어 t2의 메모리 부족 현상때문이라는 결론에 다달았고
ec2를 재부팅하였다.
AWS 퍼블릭 IP 주소가 바뀌었다? EC2 재부팅 결과, 서버의 퍼블릭 IPv4 주소가 바뀌는 일이 발생했다.
왜 그런가 찾아보니 AWS 기술문서에 다음과 같은 안내가 있었다.
퍼블릭 IP 주소1 다음과 같은 경우 인스턴스의 퍼블릭 IP 주소가 변경됩니다.]]></description>
</item>
<item>
    <title>status code 204</title>
    <link>https://www.inchan.dev/posts/202212250509/</link>
    <pubDate>Sun, 25 Dec 2022 05:09:42 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202212250509/</guid>
    <description><![CDATA[tag : #restAPI
#restAPI
덧글 삭제 API 관련 코드 리팩토링 중, status code를 맞추다가 알게 된 사실!
statusCode 204는 response를 전송하지 않는다!! 다만 status code &ldquo;204&rdquo; 만 전달할 뿐.
이걸 몰라서 코드의 오류인줄 알고 한참을 헤맸다. status code를 200으로 바꿨더니 다시 원래대로 response가 전송되었다.
status code 문서의 개요만 어설프게 보고서는, 삭제니까 no content인 204가 맞겠지 하고 내 멋대로 이해한 실수였다. 204에서 다시 200으로 처리한 이유는, 삭제된 이후의 덧글 리스트와 페이지네이션 위치를 json으로 전달해야할 필요성이 있어서였다.]]></description>
</item>
<item>
    <title>DBmate 사용법</title>
    <link>https://www.inchan.dev/posts/202210180502/</link>
    <pubDate>Tue, 18 Oct 2022 05:02:17 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://www.inchan.dev/posts/202210180502/</guid>
    <description><![CDATA[mySQL을 사용하여 Database를 쌓아 나갈때,
DBmate 를 사용하면
초기 세팅값을 마치 git을 저장하듯 이력을 남겨 언제든 migration 할 수 있다.
지금부터의 설명은 macOS 기준으로 기술한다. (windows가 없음 ;; )
DBmate 설치 Homebrew 를 사용하여 설치한다. 1
터미널 아무 위치에서나 무관하다. 2
$brew install dbmate 이렇게 입력 후, 엔터키를 누르면 자동으로 설치가 된다.
그리고, 하나의 파일이 필요하다. 바로 .env 파일. IDE 또는 터미널 vim으로 .env 파일을 생성한 후, 다음과 같이 입력한다. &quot; cat.]]></description>
</item>
</channel>
</rss>
