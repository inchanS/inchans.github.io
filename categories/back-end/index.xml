<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Back-End - Category - inchan.dev</title>
        <link>https://inchan.dev/categories/back-end/</link>
        <description>Back-End - Category - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Sun, 18 Feb 2024 13:35:51 &#43;0900</lastBuildDate><atom:link href="https://inchan.dev/categories/back-end/" rel="self" type="application/rss+xml" /><item>
    <title>AWS public IP 요금 부과에 따른 대처 및 EC2를 이용한 RDS 외부 연결하기</title>
    <link>https://inchan.dev/posts/202403051335/</link>
    <pubDate>Sun, 18 Feb 2024 13:35:51 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202403051335/</guid>
    <description><![CDATA[작년 말 즈음 AWS로부터 한통의 메일을 받았고, 그 내용은 AWS에서의 모든 public IP에 대한 요금을 부과 하겠다는 것이었다.
공지 – AWS Public IPv4 주소 요금 변경 및 Public IP Insights 기능 출시 | Amazon Web Services 한국 블로그
AWS에서 퍼블릭(Public) IPv4 주소에 대한 새로운 요금이 도입됩니다. 2024년 2월 1일부터 서비스 연결 여부에 관계없이 모든 퍼블릭 IPv4 주소에 대해 시간당 IP당 0.005 USD의 요금이 부과됩니다. 계정에 할당했지만 EC2 인스턴스에 연결하지 않은 퍼블릭 IPv4 주소에 대해서는 이미 요금이 부과되고 있습니다.]]></description>
</item>
<item>
    <title>AWS EC2 서버에 HTTPS 적용하기(2) - Cloudflare 이용 방법</title>
    <link>https://inchan.dev/posts/202403051214/</link>
    <pubDate>Sun, 18 Feb 2024 12:14:30 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202403051214/</guid>
    <description><![CDATA[관련 글
AWS EC2 서버에 HTTPS 적용하기(1) - Route53과 로드밸런서 이용 AWS EC2에 HTTPS를 연결하는 방법은 몇가지가 있는데
그 중 하나는 Route53을 이용하는 것이고,
다른 하나는 도메인 서비스의 프록싱을 통해 바로 연결하는 방법이다.
전자의 경우 위 관련 글의 링크에서 참고할 수 있으며 이 글은 후자에 관한 글이다.
우선 EC2 인스턴스에는 public IPv4 주소를 하나 부여할 수 있다.
이는 인스턴스 생성시 설정에서 &lsquo;자동으로 부여하기&rsquo;를 통해 부여할 수도 있고, 따로이 탄력적 IP를 하나 생성하여 부여할 수도 있다.]]></description>
</item>
<item>
    <title>typeORM 시간대 설정에 관한 고찰 - typeORM의 dateStrings와 timezone 옵션에 따른 시간대 혼란</title>
    <link>https://inchan.dev/posts/202403010802/</link>
    <pubDate>Mon, 05 Feb 2024 08:22:58 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202403010802/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1525562929550-63ef340cfe1d?q=80&amp;w=2748&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" referrerpolicy="no-referrer">
            </div>먼저 알아두기 mySQL - Date 필드의 타입 종류 mySQL에서 Date 필드의 타입 종류는 다음과 같다.
DATE - 날짜만 TIME - 시간만 DATETIME - 시간대가 반영되지 않은 현재 서버 시간대의 날짜와 시간 데이터 TIMESTAMP - 시간대가 반영된 날짜와 시간 데이터 여기서 주의할 점은 TIMESTAMP 이다.
이 데이터는 해당 서버의 시간대를 반영하기에 DB에 저장될 때에는 UTC(+00:00) 시간대로 변환되어 저장된다.
단, 조회시 세션 설정에 따른 시간대를 반영하여 해당 시간대로 변환된 데이터로 조회된다.]]></description>
</item>
<item>
    <title>Node.js에서 OOP 기반 리포지토리에 적용한 싱글톤 디자인패턴</title>
    <link>https://inchan.dev/posts/202401261149/</link>
    <pubDate>Fri, 26 Jan 2024 11:49:52 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401261149/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1642624466789-9e0649ba4e31?q=80&amp;w=2832&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" referrerpolicy="no-referrer">
            </div>&lt;표지 사진출처: Unsplash)&gt; Project Tech Stack Overview Language: TypeScript
Platform: Node.js
Web Framework: Express.js
Database: MySQL
ORM: TypeORM
Cloud Storage: AWS S3
Development Tool: WebStorm
Version Control and Issue Tracking: GitHub Issue
얼마 전, 모든 코드를 OOP로 리팩토링한 뒤, 한 문제를 발견했다.
리포지토리 역시 클래스 기반으로 내보내고 있었는데 때문에 각각의 서비스 로직에서는 이를 new Class() 형태로 불러오면서 단일 인스턴스가 아닌 여러 인스턴스의 생성 위험이 있었다.
OOP 리팩토링 전, 함수기반에서는 최초 호출된 datasource 인스턴스 하나를 계속해서 사용하기에 문제가 없었는데 이 부분을 간과했다.]]></description>
</item>
<item>
    <title>AWS EC2 서버에 HTTPS 적용하기(1) - Route53과 로드밸런서 이용</title>
    <link>https://inchan.dev/posts/202401122216/</link>
    <pubDate>Wed, 10 Jan 2024 22:17:59 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401122216/</guid>
    <description><![CDATA[관련 글
AWS EC2 서버에 HTTPS 적용하기(2) - Cloudflare 이용 방법 팀 프로젝트로 백엔드 서버를 EC2에서 배포하여 사용중인데 여기에 HTTPS를 적용하여 보았다.
적용방법은 몇가지가 있지만 크게 AWS의 Route53을 이용하는 방법과 도메인서비스의 프록싱을 이용한 방법 등이 있다.
그 중 첫번째 방법에 대해 기술한다.
겁먹지 말기 AWS내에서 각 서비스를 이리저리 다니며
무언가를 자꾸 생성하고 또 세팅하다보니 자칫 어렵다고 지레 겁먹기 쉬운데
실제로 해보면 생각보다 간단하고 쉽다. 구글링을 하다보면 여러 관련 글이 있는데 아래 참고한 2개의 웹페이지가 가장 잘 설명되어있다.]]></description>
</item>
<item>
    <title>AWS EC2에서 product 서버와 개발용 서버 같이 사용하기</title>
    <link>https://inchan.dev/posts/202306191659/</link>
    <pubDate>Mon, 19 Jun 2023 16:59:51 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306191659/</guid>
    <description><![CDATA[프로젝트를 진행하다보면 필연적으로 프론트엔드와의 통신교류가 필요하고,
이 때마다 local server로 열기보단 상시 열려있는 server가 있는 것이 훨씬 편하다.
때문에 이러한 개발과정상 필요한 back-end의 통신교류용 API 서버를 AWS EC2에서 간편하게 열어 사용하는 방법에 대해 기술하려 한다.
초기 처음 통신교류를 위한 서버는 VScode의 Live Share Extension을 이용하였다.
방법은 다음과 같다.
extensions에서 Live Share 설치 좌측 사이드 메뉴에서 Live Share 아이콘 클릭 Share 버튼을 클릭하면 실시간 공유가 시작된다. 여기서 Shared Servers를 클릭하고 상단 검색창에 포트 번호를 입력후, enter를 누르면 해당 포트로 서버가 공유된다.]]></description>
</item>
<item>
    <title>AWS RDS 데이터 - 다른 계정으로 이전하기</title>
    <link>https://inchan.dev/posts/202306191507/</link>
    <pubDate>Mon, 19 Jun 2023 15:07:40 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306191507/</guid>
    <description><![CDATA[서로 다른 AWS의 계정간 RDS의 데이터를 이전하는 방법에 대해 소개한다.
AWS RDS 계정간 이동 우선 간략히 설명하자면 순서는 다음과 같다.
Info 구 계정에서 스냅샷 생성 생성이 완전히 완료되면 스냅샷 공유 탭이 활성화된다. 스냅샷 공유에서 private 선택후, 계정란에 이전할 새로운 계정의 ID 입력 이전할 새 계정으로 로그인 후, RDS에서 좌측 사이드바의 스냅샷 메뉴 - 상단 나와 공유된 스냅샷 탭 클릭 마이그레이션 선택! (RDS 세팅시 프리티어라고 따로 설정하는 안내가 없으니 잘 보고 세팅) 끝!]]></description>
</item>
<item>
    <title>MySQL에서 이메일 재사용 가능하게 하기- Soft Delete와 Unique를 함께 활용하다.</title>
    <link>https://inchan.dev/posts/202306070208/</link>
    <pubDate>Wed, 07 Jun 2023 02:08:24 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202306070208/</guid>
    <description><![CDATA[개발환경 Javascript 런타임 플랫폼: Node.js 언어: TypeScript 프레임워크: Express DB: MySQL ORM: TypeORM 현재 조건 상황 회원가입시, 이메일과 패스워드가 필수 입력입력인데, 이메일의 경우 mySQL에서 unique 처리 회원가입 과정에서 이메일 중복 여부를 확인하고 통과했을 경우에만 회원가입 가능 회원 삭제시, 실제 회원정보를 DB에서 지우지 않고 TypeORM의softDelete 방식으로 deleted_at 컬럼에 삭제일시가 기록되는 방식 (일정기간 이후 삭제할 요량으로 단기간 데이터 보존) Question 이미 회원 삭제된 정보의 이메일로 재가입하려는 경우,
해당 이메일은 이미 mySQL에서 unique로 입력되어있는 이메일이기 때문에 이메일 중복확인에서 통과되지 않는다.]]></description>
</item>
<item>
    <title>Swagger를 이용한 백엔드의 효과적인 API명세 전달</title>
    <link>https://inchan.dev/posts/202303080503/</link>
    <pubDate>Wed, 08 Mar 2023 05:14:43 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202303080503/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1516321497487-e288fb19713f?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2670&amp;q=80" referrerpolicy="no-referrer">
            </div>사진출처: unsplash
백엔드가 효과적인 명세 전달 고민 Failure 그동안 진행했던 프로젝트에서 제대로 된 API 명세를 적시에 프론트측에 전달하지 못했고,
때문에 최종 출시를 앞두고 서로간의 코드 오류를 잡느라 시간적 비용이 꽤나 낭비됐다. 간단하게는 Request Body 값의 TYPE과 관련된 소통 혼선으로 겪었던 헤프닝도 더러 있었다. 어떻게 하면 좋을까? 우선은 백엔드의 입장에서 생각해본다.
명세는 코드가 만들어지면서 늘 수정될 수 있다. 때문에 명세는 코드와 함께 작업되어야 하고, API 테스트를 위해 즉각적으로 수정되어야 한다. 같은 백엔드 팀의 경우에는 직접 코드를 보기에 명세의 부족함을 보완할 수는 있다.]]></description>
</item>
<item>
    <title>typeORM transaction에서 repository 사용하기</title>
    <link>https://inchan.dev/posts/202302250414/</link>
    <pubDate>Sat, 25 Feb 2023 04:14:31 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202302250414/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1555421689-491a97ff2040?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTV8fHRyYW5zYWN0aW9ufGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60&amp;h=300" referrerpolicy="no-referrer">
            </div>&lt;사진: unsplash&gt;
transaction 구성중 Entity가 아닌 Repository 사용시 typeORM에서 transaction을 사용하는 방법은 몇가지가 있지만,
복잡한 service단의 처리에서는 아래의 queryRunner 방식이 더 적합할것 같아서
dataSource.createQueryRunner() 방식을 사용했다.1
// transaction으로 묶어주기 const queryRunner = dataSource.createQueryRunner(); await queryRunner.connect(); await queryRunner.startTransaction(); try { // feed 저장 let newTempFeed: Feed = plainToInstance(FeedDto, feedInfo); const tempFeed = await FeedRepository.createFeed(newTempFeed); //&lt;- 문제!! // ... 추가 코드들 } catch (err) { await queryRunner.rollbackTransaction(); throw new Error(`createTempFeed TRANSACTION error: ${err}`); } finally { await queryRunner.]]></description>
</item>
</channel>
</rss>
