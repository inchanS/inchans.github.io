<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Env - Category - inchan.dev</title>
        <link>https://inchan.dev/categories/env/</link>
        <description>Env - Category - inchan.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>song@inchan.dev (inchan)</managingEditor>
            <webMaster>song@inchan.dev (inchan)</webMaster><lastBuildDate>Wed, 31 Jan 2024 14:13:39 &#43;0900</lastBuildDate><atom:link href="https://inchan.dev/categories/env/" rel="self" type="application/rss+xml" /><item>
    <title>프로젝트별 각각의 node 버전을 nvm으로 자동 적용하기</title>
    <link>https://inchan.dev/posts/202401311413/</link>
    <pubDate>Wed, 31 Jan 2024 14:13:39 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202401311413/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Node.js_logo.svg/2880px-Node.js_logo.svg.png" referrerpolicy="no-referrer">
            </div>source : nvm-sh/nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions 새로운 프로젝트는 Node 버전 중 현재 최신 LTS 버전인 20 버전으로 진행하려는데, 기존 진행중인 프로젝트가 AWS-ec2에서 node@16으로 세팅되어있던 터라, macOS에서 2개 버전을 설치해 사용해야하는 상황이 왔다.1
때문에 여러 node 버전을 사용할 수 있는 nvm(Node version Manager)을 설치
설치는 brew를 통해 설치했고 이후 과정은 brew에서 자세하게 설명해준다.
장점 OS에 하나 이상의, 여러 version별 node를 설치하고 프로젝트별로 각각 다른 버전의 node를 사용할 수 있다.]]></description>
</item>
<item>
    <title>devonthink에서 markdown으로 웹클리핑시 이미지 주소 문제</title>
    <link>https://inchan.dev/posts/202302020410/</link>
    <pubDate>Thu, 02 Feb 2023 04:10:40 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202302020410/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://www.devontechnologies.com/media/pages/apps/devonthink/2706592775-1612970307/packshot-devonthink-light.png" referrerpolicy="no-referrer">
            </div>&lt;사진: DEVONtechnologies | DEVONthink, professional document and information management for the Mac and iOS&gt;
코딩을 공부하면서 정말 많은 웹 문서들을 참고하며 정리하게 된다.
그 중, 보관하고자 하는 문서는 주로 웹클리핑을 통해 정보를 수집한다.
이때, 클리핑 포맷은 보통 PDF로 하지만 가끔 code block내 스크롤이 있는 경우에는
PDF에서 짤린채로 수집되는 문제가 있어 MarkDown 포맷으로 클리핑을 한다.
나는 주로 아래 두 도구를 사용하여 자료를 정리한다.
Obsidian(note taking app) DevonThink(note database) 이때, 웹클리핑은 Obsidian 노트내로 바로 삽입할 수 있는 방법도 있지만 1]]></description>
</item>
<item>
    <title>WebStorm - console.log(변수) 자동완성 라이브 템플릿 만들기</title>
    <link>https://inchan.dev/posts/202302020409/</link>
    <pubDate>Thu, 02 Feb 2023 04:09:55 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202302020409/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1639507986194-48ef61205b61?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8amV0YnJhaW5zfGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60&amp;h=300" referrerpolicy="no-referrer">
            </div>&lt;사진: unsplash&gt;
JavaScript로 코딩을 하다보면 적잖이 console.log()를 사용하게 된다.
보통 나는 간단하게 현재 흐름상 위치를 잡거나 객체를 확인할 때 자주 쓰는데,
많은 글자는 아니지만 그래도 같은걸 계속해서 타이핑하는게 귀찮아서 만들었다.
축약어는 console.log의 앞글자를 따서 cl로 단축 명령어를 만들었고,
cl 단축어 입력 후 tab을 누르면 해당 WebStorm의 live template이 실행된다. 간단하게 다음과 같은 역할을 수행된다.
console.log()를 입력 괄호 안에 변수명을 타이핑할 수 있도록 커서 위치 이동 변수명을 쓰면 따옴표 안에 동일한 변수가 들어가도록 설정 즉 console.]]></description>
</item>
<item>
    <title>mac 터미널에서 폴더트리 구조 확인</title>
    <link>https://inchan.dev/posts/202301230429/</link>
    <pubDate>Mon, 23 Jan 2023 04:29:44 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202301230429/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1607877361964-bf792b65e593?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8bWFjJTIwdGVybWluYWx8ZW58MHx8MHx8&amp;auto=format&amp;fit=crop&amp;w=900&amp;q=60" referrerpolicy="no-referrer">
            </div>&lt;사진: unsplash&gt;
windows에서는 cmd에서 폴더트리가 바로 나오는것 같던데 macOS의 터미널에서는 따로 tree를 설치해야 볼 수 있다.
아래 명령어로 brew를 통해 설치
$ brew install tree 사용법 기본적인 사용법은 작업중인 폴더로 가서 tree 라고만 입력하면 된다.
$ tree 폴더 제외 그런데 node project와 같이 node_module이라던가, dist 폴더가 있는 구조에서는 불필요하게 많은 폴더가 출력됨을 볼 수 있다.
폴더를 제외하고 싶을 땐, tree -I &lt;diretory&gt;로 명령하면 해당 폴더를 제외하고 출력 가능하다.
예시&gt; 하나의 폴더 제외]]></description>
</item>
<item>
    <title>터미널에서 &#39;바로가기&#39; 단축키 등록하기</title>
    <link>https://inchan.dev/posts/202210130407/</link>
    <pubDate>Thu, 13 Oct 2022 04:07:19 &#43;0900</pubDate>
    <author>inchan</author>
    <guid>https://inchan.dev/posts/202210130407/</guid>
    <description><![CDATA[터미널을 처음 실행하면 꼭 사용자 폴더에서 시작한다.
cd ...로 찾아가는게 너무 귀찮다.
그렇다고 finder에서 폴더를 drag &amp; drop해서 직접경로를 떨어뜨리는 방법도 있지만,
굳이 키보드에서 또 마우스나 트랙패드로 손을 움직이고 싶지 않다. 때문에 알게 된 것이 바로 alias를 활용한 터미널 단축키 방법!
우선 zsh라는 쉘 을 한번 가볍게 알아본다. 힘들면 Pass하고, 바로 적용할 수 있는 방법으로 가자! 1. zshrc 편집 터미널에서 다음을 실행 vim ~/.zshrc 이미 파일이 존재할수도 있고, 없으면 파일이 생성되며 바로 편집모드로 들어가게 된다.]]></description>
</item>
</channel>
</rss>
